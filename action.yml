---
name: 'Weekly PR Summary'
description: 'Summarize Pull Requests and optionally create a discussion'
inputs:
  github-token:
    description: 'GitHub token'
    required: true
  repo-name:
    description: 'Repository name (owner/repo)'
    required: true
  category:
    description: 'Discussion category'
    required: false
    default: 'Announcements'
  project-name:
    description: 'Name of the project (to override the repository name)'
    required: false
  model:
    description: >
      LLM model to use for generating the summary.
      Remember to set the API key, e.g. env: OPENROUTER_KEY: <your key>.
    required: false
    default: 'openrouter/anthropic/claude-3.5-sonnet:beta'
  verbose:
    description: 'Increase verbosity (0 for normal, 1 for INFO, 2 for DEBUG)'
    required: false
    default: '0'
  dry-run:
    description: "Dry run mode: don't post the discussion"
    required: false
    default: 'false'
  start:
    description: 'Start date for the summary (format: YYYY-MM-DD)'
    required: false
  output-content:
    description: 'Path to render the GitHub activities used as LLM input'
    required: false
  output:
    description: 'Path to output the AI summary'
    required: false
  output-prompt:
    description: 'Path to output the LLM prompt'
    required: false
  extra-packages:
    description: >
      Additional Python packages to install (space-separated).
    required: false
    default: ''
  extra-commands:
    description: >
      Additional shell commands to run before the summary script.
      Useful for debugging purposes.
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ${{ github.action_path }}/.python-version

    - name: Collect API keys and plugins
      run: |
        import json, os
        #           0:PLUGIN       1:PROVIDER 2:KEY
        table = """ llm-openrouter openrouter ${{ env.OPENROUTER_KEY }}
                    llm-claude-3   claude     ${{ env.CLAUDE_KEY }}     """
        entries = [line.split() for line in table.splitlines()]
        selected_provider = '${{ inputs.model }}'.split('/')[0]
        plugins = ' '.join(
            plugin for plugin, p, *has_key in entries
            if has_key or p == selected_provider
        )
        keys = [entry[1:] for entry in entries if len(entry) >= 3]
        with open(os.getenv('GITHUB_ENV'), 'w') as env:
            print(f'PLUGINS={plugins}', file=env)
            print(f'KEYS={json.dumps(keys)}', file=env)
      shell: python

    - name: Install the package and its dependencies
      run: |
        uv venv
        uv pip install \
          --prefix=.venv \
          ${{ github.action_path }} \
          ${{ inputs.extra-packages }} \
          ${{ env.PLUGINS }}
      shell: bash

    - name: Store API keys in llm key registry
      run: |
        uv run python -c "
        import json, os, subprocess
        for provider, key in json.loads(os.getenv('KEYS')):
            subprocess.run(['llm', 'keys', 'set', provider, '--value', key])
        "
      shell: bash

    - name: Run extra commands
      if: inputs.extra-commands != ''
      run: ${{ inputs.extra-commands }}
      shell: bash

    - name: Run PR summary script
      run: uv run summarize-repo-activity
      shell: bash
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_REPO_NAME: ${{ inputs.repo-name }}
        INPUT_CATEGORY: ${{ inputs.category }}
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_VERBOSE: ${{ inputs.verbose }}
        INPUT_DRY_RUN: ${{ inputs.dry-run }}
        INPUT_START: ${{ inputs.start }}
        INPUT_OUTPUT_CONTENT: ${{ inputs.output-content }}
        INPUT_OUTPUT: ${{ inputs.output }}
        INPUT_OUTPUT_PROMPT: ${{ inputs.output-prompt }}
        INPUT_EXTRA_PACKAGES: ${{ inputs.extra-packages }}
